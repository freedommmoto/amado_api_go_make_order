// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: product.sql

package db

import (
	"context"
	"database/sql"
)

const deleteProduct = `-- name: DeleteProduct :one
UPDATE product SET deleted=now() WHERE id_product = $1 RETURNING id_product, name, stock, price, active, created_at, modified, deleted
`

func (q *Queries) DeleteProduct(ctx context.Context, idProduct int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, deleteProduct, idProduct)
	var i Product
	err := row.Scan(
		&i.IDProduct,
		&i.Name,
		&i.Stock,
		&i.Price,
		&i.Active,
		&i.CreatedAt,
		&i.Modified,
		&i.Deleted,
	)
	return i, err
}

const listProduct = `-- name: ListProduct :many
SELECT id_product, name, stock, price, active, created_at, modified, deleted
FROM product
ORDER BY id_product LIMIT $1
OFFSET $2
`

type ListProductParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProduct(ctx context.Context, arg ListProductParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProduct, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.IDProduct,
			&i.Name,
			&i.Stock,
			&i.Price,
			&i.Active,
			&i.CreatedAt,
			&i.Modified,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const makeNewProduct = `-- name: MakeNewProduct :one
INSERT INTO product ("name", stock, price)
VALUES ($1, $2 , $3) RETURNING id_product, name, stock, price, active, created_at, modified, deleted
`

type MakeNewProductParams struct {
	Name  sql.NullString `json:"name"`
	Stock int32          `json:"stock"`
	Price int32          `json:"price"`
}

func (q *Queries) MakeNewProduct(ctx context.Context, arg MakeNewProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, makeNewProduct, arg.Name, arg.Stock, arg.Price)
	var i Product
	err := row.Scan(
		&i.IDProduct,
		&i.Name,
		&i.Stock,
		&i.Price,
		&i.Active,
		&i.CreatedAt,
		&i.Modified,
		&i.Deleted,
	)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE product SET name=$2 , stock=$3 , price=$4 , active=$5 , modified=now()
               WHERE id_product = $1 RETURNING id_product, name, stock, price, active, created_at, modified, deleted
`

type UpdateProductParams struct {
	IDProduct int32          `json:"id_product"`
	Name      sql.NullString `json:"name"`
	Stock     int32          `json:"stock"`
	Price     int32          `json:"price"`
	Active    sql.NullBool   `json:"active"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.IDProduct,
		arg.Name,
		arg.Stock,
		arg.Price,
		arg.Active,
	)
	var i Product
	err := row.Scan(
		&i.IDProduct,
		&i.Name,
		&i.Stock,
		&i.Price,
		&i.Active,
		&i.CreatedAt,
		&i.Modified,
		&i.Deleted,
	)
	return i, err
}

const updateProductStock = `-- name: UpdateProductStock :one
UPDATE product SET stock=$2 , modified=now() WHERE id_product = $1 RETURNING id_product, name, stock, price, active, created_at, modified, deleted
`

type UpdateProductStockParams struct {
	IDProduct int32 `json:"id_product"`
	Stock     int32 `json:"stock"`
}

func (q *Queries) UpdateProductStock(ctx context.Context, arg UpdateProductStockParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProductStock, arg.IDProduct, arg.Stock)
	var i Product
	err := row.Scan(
		&i.IDProduct,
		&i.Name,
		&i.Stock,
		&i.Price,
		&i.Active,
		&i.CreatedAt,
		&i.Modified,
		&i.Deleted,
	)
	return i, err
}

const getProduct = `-- name: getProduct :one
SELECT id_product, name, stock, price, active, created_at, modified, deleted
FROM product
WHERE id_product = $1
`

func (q *Queries) getProduct(ctx context.Context, idProduct int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, idProduct)
	var i Product
	err := row.Scan(
		&i.IDProduct,
		&i.Name,
		&i.Stock,
		&i.Price,
		&i.Active,
		&i.CreatedAt,
		&i.Modified,
		&i.Deleted,
	)
	return i, err
}

const getProductLowStock = `-- name: getProductLowStock :one
SELECT id_product, name, stock, price, active, created_at, modified, deleted
FROM product
WHERE stock < $1
`

func (q *Queries) getProductLowStock(ctx context.Context, stock int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductLowStock, stock)
	var i Product
	err := row.Scan(
		&i.IDProduct,
		&i.Name,
		&i.Stock,
		&i.Price,
		&i.Active,
		&i.CreatedAt,
		&i.Modified,
		&i.Deleted,
	)
	return i, err
}
